// Generated by CoffeeScript 1.6.3

/*This plugin was modified by NextSphere as per requirements*/

(function() {
	var $;

	$ = jQuery;

	$.awesomeCropper = function(inputAttachTo, options) {
		var $deleteImageButton, $editImageButton, $applyButton, $cancelButton, $container, $cropSandbox,$cropSandbox2, $fileSelect, $imagesContainer, $inputAttachTo, $progressBar, $resultIm, $sourceIm, $urlSelect, $urlSelectButton, a, cleanImages, div, drawImage, fileAllowed, handleDragOver, handleDropFileSelect, handleFileSelect, image, input, log, readFile, removeAreaSelect, removeLoading, saveCrop, setAreaSelect, setImages, setLoading, setOriginalSize, settings;
		settings = {
				width: 200,
				height: 200,
				debug: false,
				image: contextPath+'/static/pictures/profiles/no-profile-pic.jpg',
				imageDefaultWidth:110,
				imageDefaultHeight:110,
				circle:false,
				profile:false,
		};
		settings = $.extend(settings, options);
		log = function() {
			if (settings.debug) {
				return typeof console !== "undefined" && console !== null ? console.log(arguments) : void 0;
			}
		};
		$inputAttachTo = $(inputAttachTo);
		input = function(type) {
			return $("<input type = \"" + type + "\" />");
		};
		div = function() {
			return $("<div/>");
		};
		a = function(text) {
			return $("<a href=\"javascript:void(0);\">" + text + "</a>");
		};
		image = function() {
			return $('<img id="sample_input" style="max-height: 170px; max-width: 300px;" isDefault="false">');
		};
		$container = div().insertAfter($inputAttachTo).addClass('awesome-cropper').attr('id','awesome-cropper-container');
		$cropSandbox = $('<canvas id="canvasContainer"></canvas>');
		$cropSandbox.attr({
			width: settings.width,
			height: settings.height
		});
		$container.append($cropSandbox);
		if(settings.profile){
			$cropSandbox2 = $('<canvas id="canvasContainer2"></canvas>');
			$cropSandbox2.attr({
				width: 50,
				height: 50
			});
			$cropSandbox2.css('border-radius','50%');
			$container.append($cropSandbox2);
		}
		$fileSelect = input('file');
		$fileSelect.attr("id",inputAttachTo.substring(1)+"-file");
		$fileSelect.addClass('hidefile');
		$container.append($fileSelect);
		if (settings.proxy_path !== void 0) {
			$urlSelect = input('text');
			$urlSelectButton = input('button');
			$urlSelectButton.val('Upload from url');
			$container.append(div().addClass('form-group').append($urlSelect).append($urlSelectButton));
		}
		$progressBar = div().addClass('progress hide').append(div().addClass('progress-bar').attr({
			role: 'progressbar',
			'aria-valuenow': "60",
			'aria-valuemin': "0",
			'aria-valuemax': "100",
			style: "width: 60%;"
		}));
		$container.append($progressBar);
		$resultIm = image();
		$container.append($resultIm);
		$sourceIm = image();
		$deleteImageButton = a('<i class="trash-icons-sm selected-sm margin_i_f cursor-hand  mar-left-minus-40 profile-edit-image-buttons"></i>');
		$editImageButton = a('<i class="edit-sm-icons selected-sm mar-left-minus-54 profile-edit-image-buttons"></i>');
		/* $applyButton = a('Apply').addClass('grey-button font-17 ancher_lock');
    $cancelButton = a('Cancel').addClass('grey-button font-17').attr({
      'data-dismiss': "modal"
    });*/
		/*$imagesContainer = div().append(div().addClass('modal-dialog').append(div().addClass('modal-content').append(div().addClass('modal-body').append(div().addClass('col-md-9').append($sourceIm)).append(div().addClass('col-md-3').attr('id',"previewContainer").append($cropSandbox)).append(div().addClass('clearfix')), div().addClass('modal-footer').append(div().addClass('btn-group').append($cancelButton).append($applyButton))))).addClass('modal').attr({
      role: 'dialog'
    });*/

		$imagesContainer = div().append(div().addClass('modal-dialog').append(div().addClass('modal-content')
				.append(div().html('Add Photo<button type="button" class="close" data-dismiss="modal" aria-hidden="true"><i class="selected-sm close-sm-icons pad-right-24"></i></button>')
						.addClass('image-crop-padding element-font-14'))
				.append(div().addClass('pad-left-25 modal-body pad-bot-0-important height-235 greybg').append(div().html('<div class="image-crop-content">Adjust Photo</div><div class="pad-bot-10 toolbar-element-content">Drag the square to change position and size.</div>')
						.addClass('col-md-7 pad-right-25 right-border-dark main-img-holder').append(div().addClass('pull-right').append($editImageButton))
						.append(div().addClass('pull-right pad-right-25').append($deleteImageButton))
						.append($sourceIm)).append(div().addClass('mar-left-18').html('<div class="image-crop-content">Preview</div><div class="pad-bot-10 toolbar-element-content">How you will be appear</div>').addClass('col-md-4 pad-left-25-important').attr('id',"previewContainer").append(((settings.profile)?($cropSandbox2):''))
								.append($cropSandbox)).append(div().addClass('clearfix')),div().addClass('modal-footer')
						.append(div().addClass('btn-group').append(div().html('<input type="button" id="cancelButton" class="grey-button font-17" value="Cancel"> <input type="button" disabled="disabled" id="applyButton" class="grey-button font-17" value="Apply">')))))).addClass('modal  awesome-crop-model').attr({
							role: 'dialog'
						});

		//$container.append($imagesContainer);
		if($('.awesome-crop-model').length) $('.awesome-crop-model').remove();
		$('#modal-box-wrapper').append($imagesContainer);

		removeAreaSelect = function(image) {
			return image.imgAreaSelect({
				remove: true
			});
		};
		cleanImages = function() {
			var im;
			removeAreaSelect($sourceIm);
			im = $sourceIm;
			$sourceIm = image();
			return im.replaceWith($sourceIm);
		};
		setLoading = function() {
			return $progressBar.removeClass('hide');
		};
		removeLoading = function() {

			//	alert(" removing loading!");
			setTimeout(function(){

				$("#applyButton").removeClass('grey-button');//To remove the disabled mode for apply button
				$("#applyButton").addClass('def-button');
				$("#applyButton").removeAttr('disabled');

				setAreaSelect($sourceIm);
			}, 1000);  

			$imagesContainer.on('shown.bs.modal', function() {

				return ;


			}).on('hidden.bs.modal', function() {
				return cleanImages();
			}).modal();
			return $progressBar.addClass('hide');
		};
		setOriginalSize = function(img) {
			var tempImage;
			tempImage = new Image();
			tempImage.onload = function() {

				setTimeout(removeLoading, 1000);

				return img.attr({
					'data-original-width': tempImage.width,
					'data-original-height': tempImage.height
				});
			};
			return tempImage.src = img.attr('src');
		};
		setImages = function(uri) {

			$sourceIm.attr('src', uri) ;

			$sourceIm.load(function() {
				return setOriginalSize($sourceIm);
			});
		};
		drawImage = function(img, x, y, width, height) {

			// fixes issue of uploading images with transparent backgrounds	
			var canvas = $('#canvasContainer')[0];
			var blankContext = canvas.getContext('2d');
			blankContext.clearRect(0, 0, canvas.width, canvas.height);

			if(settings.profile){
				var canvas2 = $('#canvasContainer2')[0];
				var blankContext2 = canvas2.getContext('2d');
				blankContext2.clearRect(0, 0, canvas2.width, canvas2.height);
			}


			var context, destHeight, destWidth, destX, destY, oHeight, oWidth, r, sourceHeight, sourceWidth, sourceX, sourceY;
			oWidth = img.attr('data-original-width');
			oHeight = img.attr('data-original-height');
			if (oWidth > oHeight) {
				r = oHeight / img.height();
			} else {
				r = oWidth / img.width();
			}
			sourceX = Math.round(x * r);
			sourceY = Math.round(y * r);
			sourceWidth = Math.round(width * r);
			sourceHeight = Math.round(height * r);
			destX = 0;
			destY = 0;
			destWidth = settings.width;
			destHeight = settings.height;
			context = $cropSandbox.get(0).getContext('2d');
			// console.log(" before : " + settings.circle );
			if(settings.circle){

				// console.log(" inside : " + settings.circle );
				var width=parseFloat($('.imgareaselect-selection').width());

				var reloadcircle=function(){$('#powerplay').css('width',width*2).css('height',width*2).css('left',(-width/2)+'px').css('top',(-width/2)+'px').css('border-width',width/2);
			//	console.info('reloadcircle Event Triggered');
				$('#canvasContainer').css('border-radius','50%');
				}
				if($('#powerplay').length==0){
					// console.log(" powerplay length 0 : " );
					var i=20;
					$('.imgareaselect-selection').parent().append('<div id="powerplay" style="position:absolute;z-index: 9876542;border: 100px solid rgba(0, 0, 0, 0.5);border-radius: 50%;"></div>');
				}
				reloadcircle();
				$cropSandbox2.get(0).getContext('2d').drawImage(img.get(0), sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, 50, 50);
			}
			return context.drawImage(img.get(0), sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
		};

		drawTheCircle = function(){

			var i=20;
			$('.imgareaselect-selection').parent().append('<div id="powerplay" style="position:absolute;z-index: 9876542;border: 100px solid rgba(0, 0, 0, 0.5);border-radius: 50%;"></div>');

			var width=parseFloat($('.imgareaselect-selection').width());

			// console.log("using width : "  +width);
			$('#powerplay').css('width',width*2).css('height',width*2).css('left',(-width/2)+'px').css('top',(-width/2)+'px').css('border-width',width/2);
			// console.log("draw the circle " );
			$('#canvasContainer').css('border-radius','50%');

		};

		setAreaSelect = function(image) {
			var viewPort, x2, y2,
			_this = this;
			viewPort = $(window).height() - 150;
			if ($sourceIm.height() > viewPort) {
				$sourceIm.css({
					height: viewPort + "px"
				});
			}
			log(image.width(), image.height());
			if (image.width() / settings.width >= image.height() / settings.height) {
				y2 = image.height();
				x2 = Math.round(settings.width * (image.height() / settings.height));
			} else {
				x2 = image.width();
				y2 = Math.round(settings.height * (image.width() / settings.width));
			}
			log(x2, y2, image.width(), image.height());

			if(settings.circle){
				// console.log("circle is enabled " );
				if($('#powerplay').length==0){
					// console.log("powerplay does not yet exist");			
					setTimeout(drawTheCircle, 1000);
				}
			}

			drawImage($sourceIm, 0, 0, x2 - 1, y2 - 1);

			return image.imgAreaSelect({
				aspectRatio: "" + settings.width + ":" + settings.height,
				handles: true,
				x1: 0,
				y1: 0,
				x2: x2,
				y2: y2,
				onSelectEnd: function(img, selection) {
				$("#applyButton").removeClass('grey-button');//To remove the disabled mode for apply button
				$("#applyButton").addClass('def-button');
				$("#applyButton").removeAttr('disabled');
				return drawImage($sourceIm, selection.x1, selection.y1, selection.width - 1, selection.height - 1);
			}
			});
		};
		fileAllowed = function(name) {
			var res;
			res = name.match(/\.(jpg|png|gif|jpeg)$/mi);
			if (!res) {
				// alert('Only *.jpeg, *.jpg, *.png, *.gif files allowed');
				$("#photoUploadExtErrorMsg").html('Picture format not supported');
				return false;
			} else {
				$("#photoUploadExtErrorMsg").html('');
				return true;
			}
		};
		readFile = function(file) {
			var reader;
			reader = new FileReader();
			setLoading();
			reader.onload = function(e) {
				return setImages(e.target.result);
			};
			return reader.readAsDataURL(file);
		};
		handleDropFileSelect = function(evt) {
			evt.stopPropagation();
			evt.preventDefault();
			if (evt.originalEvent.dataTransfer.files[0] !== void 0) {
				if (!fileAllowed(evt.originalEvent.dataTransfer.files[0].name)) {
					return;
				}
				return readFile(evt.originalEvent.dataTransfer.files[0]);
			}
		};
		handleDragOver = function(e) {
			e.originalEvent.dataTransfer.dropEffect = "copy";
			e.stopPropagation();
			return e.preventDefault();
		};
		handleFileSelect = function(evt) {

			$("#imagecropping-modal").modal('show');    	

			if (evt.target.files[0] !== void 0) {
				if (!fileAllowed(evt.target.files[0].name)) {
					return;
				}
				readFile(evt.target.files[0]);
				//drawImage($sourceIm, 0, 0, 200, 200); 

				// BLANKS THE CANVAS
				var canvas = $('#canvasContainer')[0];
				var blankContext = canvas.getContext('2d');
				blankContext.clearRect(0, 0, canvas.width, canvas.height);

				if(settings.profile){
					var canvas2 = $('#canvasContainer2')[0];
					var blankContext2 = canvas2.getContext('2d');
					blankContext2.clearRect(0, 0, canvas2.width, canvas2.height);
				}

				return evt.target.value = "";
			}
		};
		saveCrop = function() {
			var result;
			result = $cropSandbox.get(0).toDataURL();
			$resultIm.attr('src', result);
			$inputAttachTo.val(result);
			$inputAttachTo.html($resultIm);
			return cleanImages();

		};
		$fileSelect.on('change', handleFileSelect);
		$container.on('dragover', handleDragOver);
		$container.on('drop', handleDropFileSelect);
		if (settings.proxy_path !== void 0) {
			$urlSelect.on('dragover', handleDragOver);
			$urlSelect.on('drop', handleDropFileSelect);
			$urlSelectButton.click(function() {
				var url;
				if (!$urlSelect.val().match(/^(https?:\/\/)?/)) {
					return;
				}
				if (!fileAllowed($urlSelect.val())) {
					return;
				}
				setLoading();
				url = settings.proxy_path.replace(/:url/, $urlSelect.val());
				return $.get(url).done(function(data) {
					return setImages(data);
				}).fail(function(jqXNR, textStatus) {
					$progressBar.addClass('hide');
					return alert("Failed to load image");
				});
			});
		}
		$deleteImageButton.on('click', function() {
			//$inputAttachTo.html('<img src="'+contextPath+'/static/pictures/defaultimages/no-profile-pic.jpg" id="sample_input" isDefault="true" width="110" height="110"/>');
			$inputAttachTo.html('<img src="'+settings.image+'" id="sample_input" isDefault="true" width="'+settings.imageDefaultWidth+'" height="'+settings.imageDefaultHeight+'"/>');

			$imagesContainer.modal('hide');

		});
		$editImageButton.on('click', function() {
		//	$("#applyButton").addClass('grey-button font-17');
	   //	$("#applyButton").attr("disabled");
			$("#"+inputAttachTo.substring(1)+"-file").trigger('click');

		});
		$("#cancelButton").off("click").bind("click",function(e){
			$("#cancelButton").attr({
				'data-dismiss': "modal"
			});
			return cleanImages();

		});
		$("#applyButton").off("click").bind("click",function(e){
			saveCrop();
			return $imagesContainer.modal('hide');
		});
		/*$editImageButton.on('click', function() {
		alert('haiii');
	});*/

	};

	/*
  # jQuery Awesome Cropper plugin
  #
  # Copyright 2013 8xx8, vdv73rus
  #
  # v0.0.2
	 */


	$.fn.extend({
		awesomeCropper: function(options) {
		return this.each(function() {
			if ($(this).data("awesomeCropper")) {
				if (options.remove) {
					$(this).data("awesomeCropper").remove();
					$(this).removeData("awesomeCropper");
				} else {
					$(this).data("awesomeCropper").setOptions(options);
				}
			} else if (!options.remove) {
				$(this).data("awesomeCropper", new $.awesomeCropper(this, options));
			}
			if (options.instance) {
				return $(this).data("awesomeCropper");
			}
			return this;
		});
	}
	});

}).call(this);